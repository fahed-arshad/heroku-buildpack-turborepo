#!/usr/bin/env bash
# Heroku Buildpack for Turborepo Monorepo
# This buildpack installs dependencies at the root and builds a specific app

set -e

# Parse arguments
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

# Function to output build steps
function topic() {
  echo "-----> $*"
}

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

# Read APP_BASE config variable
if [ -f "$ENV_DIR/APP_BASE" ]; then
  APP_BASE=$(cat "$ENV_DIR/APP_BASE")
  topic "APP_BASE is set to: $APP_BASE"
else
  topic "ERROR: APP_BASE config variable is required"
  echo "       Please set it with: heroku config:set APP_BASE=path/to/your/app" | indent
  exit 1
fi

# Verify the app directory exists
if [ ! -d "$BUILD_DIR/$APP_BASE" ]; then
  topic "ERROR: Directory $APP_BASE not found in repository"
  echo "       Available directories:" | indent
  ls -la "$BUILD_DIR" | indent
  exit 1
fi

topic "Installing dependencies at repository root"

# Check if package.json exists at root
if [ ! -f "$BUILD_DIR/package.json" ]; then
  topic "ERROR: No package.json found at repository root"
  echo "       Turborepo requires a package.json at the root of the monorepo" | indent
  exit 1
fi

# Install Node.js if not already available
if ! command -v node &> /dev/null; then
  topic "Node.js not found, please ensure Node.js buildpack is included"
  exit 1
fi

# Change to build directory
cd "$BUILD_DIR"

# Determine package manager from packageManager field or lockfiles
PACKAGE_MANAGER=""

# First check packageManager field in package.json
if [ -f "package.json" ]; then
  PACKAGE_MANAGER_FIELD=$(node -p "try { JSON.parse(require('fs').readFileSync('package.json', 'utf8')).packageManager || '' } catch(e) { '' }" 2>/dev/null || echo "")
  if [ -n "$PACKAGE_MANAGER_FIELD" ]; then
    if [[ "$PACKAGE_MANAGER_FIELD" == yarn* ]]; then
      PACKAGE_MANAGER="yarn"
    elif [[ "$PACKAGE_MANAGER_FIELD" == pnpm* ]]; then
      PACKAGE_MANAGER="pnpm"
    elif [[ "$PACKAGE_MANAGER_FIELD" == npm* ]]; then
      PACKAGE_MANAGER="npm"
    fi
    topic "Detected package manager from packageManager field: $PACKAGE_MANAGER_FIELD"
  fi
fi

# Fallback to lockfile detection if packageManager field not found or recognized
if [ -z "$PACKAGE_MANAGER" ]; then
  if [ -f "yarn.lock" ]; then
    PACKAGE_MANAGER="yarn"
  elif [ -f "pnpm-lock.yaml" ]; then
    PACKAGE_MANAGER="pnpm"
  elif [ -f "package-lock.json" ]; then
    PACKAGE_MANAGER="npm"
  else
    PACKAGE_MANAGER="npm"
  fi
  topic "Detected package manager from lockfile: $PACKAGE_MANAGER"
fi

# Install dependencies with the detected package manager
case "$PACKAGE_MANAGER" in
  "yarn")
    topic "Installing dependencies with yarn"
    # Enable corepack if available for yarn
    if command -v corepack &> /dev/null; then
      corepack enable 2>&1 | indent
    fi
    yarn install --frozen-lockfile 2>&1 | indent
    ;;
  "pnpm")
    topic "Installing dependencies with pnpm"
    # Install pnpm if not available
    if ! command -v pnpm &> /dev/null; then
      if command -v corepack &> /dev/null; then
        corepack enable 2>&1 | indent
        corepack prepare pnpm@latest --activate 2>&1 | indent
      else
        npm install -g pnpm 2>&1 | indent
      fi
    fi
    pnpm install --frozen-lockfile 2>&1 | indent
    ;;
  "npm"|*)
    topic "Installing dependencies with npm"
    if [ -f "package-lock.json" ]; then
      npm ci 2>&1 | indent
    else
      npm install 2>&1 | indent
    fi
    ;;
esac

# Check if turbo is available
if ! command -v turbo &> /dev/null && ! npx turbo --version &> /dev/null; then
  topic "ERROR: Turbo is not available"
  echo "       Please ensure turbo is installed as a dependency or devDependency" | indent
  exit 1
fi

# Build the specific app using Turbo
topic "Building app: $APP_BASE"

# Check if turbo.json exists
if [ ! -f "turbo.json" ]; then
  topic "WARNING: No turbo.json found, building with npm/yarn/pnpm scripts"
  
  # Fallback to building the specific app directly
  cd "$APP_BASE"
  
  if [ -f "package.json" ]; then
    # Try to run build script in the app directory using the detected package manager
    case "$PACKAGE_MANAGER" in
      "yarn")
        BUILD_CMD="yarn build"
        ;;
      "pnpm")
        BUILD_CMD="pnpm build"
        ;;
      *)
        BUILD_CMD="npm run build"
        ;;
    esac
    
    if $BUILD_CMD 2>&1 | indent; then
      topic "Successfully built $APP_BASE with $PACKAGE_MANAGER"
    else
      topic "ERROR: Failed to build $APP_BASE with $PACKAGE_MANAGER"
      exit 1
    fi
  else
    topic "ERROR: No package.json found in $APP_BASE"
    exit 1
  fi
  
  cd "$BUILD_DIR"
else
  # Use Turbo to build the specific app
  if yarn build:api 2>&1 | indent; then
    topic "Successfully built $APP_BASE with Turbo"
  else
    topic "ERROR: Failed to build $APP_BASE with Turbo"
    echo "       Make sure the app name matches the package name in $APP_BASE/package.json" | indent
    exit 1
  fi
fi

# Copy app files to root for Heroku to serve
topic "Preparing app for deployment"

# Create a staging directory
STAGING_DIR="$BUILD_DIR/.heroku-staging"
mkdir -p "$STAGING_DIR"
mkdir -p "$STAGING_DIR/$APP_BASE"

# Copy the built app to staging
cp -r "$BUILD_DIR/$APP_BASE"/* "$STAGING_DIR/$APP_BASE/"

# Copy common files if they exist
if [ -f "$BUILD_DIR/package.json" ]; then
  cp "$BUILD_DIR/package.json" "$STAGING_DIR/"
fi

if [ -f "$BUILD_DIR/package-lock.json" ]; then
  cp "$BUILD_DIR/package-lock.json" "$STAGING_DIR/"
fi

if [ -f "$BUILD_DIR/yarn.lock" ]; then
  cp "$BUILD_DIR/yarn.lock" "$STAGING_DIR/"
fi

if [ -f "$BUILD_DIR/pnpm-lock.yaml" ]; then
  cp "$BUILD_DIR/pnpm-lock.yaml" "$STAGING_DIR/"
fi

# Copy node_modules if needed (for production dependencies)
if [ -d "$BUILD_DIR/node_modules" ]; then
  topic "Copying node_modules for production"
  cp -r "$BUILD_DIR/node_modules" "$STAGING_DIR/"
fi

# Move staging files to build directory root
mv "$STAGING_DIR"/* "$BUILD_DIR/" 2>/dev/null || true
rmdir "$STAGING_DIR"

# Handle Procfile
if [ -f "$BUILD_DIR/$APP_BASE/Procfile" ]; then
  topic "Using Procfile from $APP_BASE"
  cp "$BUILD_DIR/$APP_BASE/Procfile" "$BUILD_DIR/"
elif [ ! -f "$BUILD_DIR/Procfile" ]; then
  topic "Creating default Procfile"
  echo "web: yarn start:prod" > "$BUILD_DIR/Procfile"
fi

topic "Build completed successfully"
echo "       App $APP_BASE is ready for deployment" | indent
